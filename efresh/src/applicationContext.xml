<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">
	<!-- 开启注解配置 -->
	<context:annotation-config />

	<!-- 对指定的包进行组件扫描 --><!-- ##########此处加包模块########### -->
	<context:component-scan base-package="com.donglusoft.person" />
	<context:component-scan base-package="com.donglusoft.rightmanagement" />
	<!-- 20131029 银保系统添加 -->
	<context:component-scan base-package="com.yinli.item" />
	<context:component-scan base-package="com.yinli.util.common" />

	<!-- 读取配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:conf/properties/jdbc.properties</value>
				<value>classpath*:conf/properties/hibernate.properties</value>
			</list>
		</property>
	</bean>

	<!-- 配置数据源,导入c3p0-0.9.1.2.jar -->
	<bean id="dataSourceImpl" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!--连接池中保留的最小连接数。-->
		<property name="minPoolSize" value="2" />
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="3" />
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="3" />
		<!--最大空闲时间,600秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="600" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="3" />
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements  
		 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。   如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
		<property name="maxStatements" value="0" />
	</bean>
	<!-- ipad用户登陆数据源  -->
	<!--<bean id="ipadSchema" class="java.lang.String">
		<constructor-arg type="java.lang.String" value="${jdbc.ipad.schema}"></constructor-arg>
	</bean>
	<bean id="ipadDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.ipad.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.ipad.url}" />
		<property name="user" value="${jdbc.ipad.username}" />
		<property name="password" value="${jdbc.ipad.password}" />
		连接池中保留的最小连接数。
		<property name="minPoolSize" value="3" />
		连接池中保留的最大连接数。Default: 10 
		<property name="maxPoolSize" value="3" />
		初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 
		<property name="initialPoolSize" value="3" />
		最大空闲时间,600秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 
		<property name="maxIdleTime" value="600" />
		当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 
		<property name="acquireIncrement" value="2" />
		JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements  
		 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。   如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0
		<property name="maxStatements" value="0" />
	</bean>

	-->

	
	<!-- 用p6spy 在console显示变量绑定后的真实sql 与ResultSet,方便开发 -->
	<bean id="dataSource" class="com.p6spy.engine.spy.P6DataSource">
		<constructor-arg ref="dataSourceImpl" />
	</bean>

	<!-- 集成hibernate配置 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSourceImpl" />
		<property name="hibernateProperties" ref="hibernateProperties" />
		<property name="mappingLocations">
			<list>
				<!-- 以下几个.*.hbm.xml由自带 -->
				<!-- #####华丽丽而又非常华丽丽的分界线#### =====注意可以使用通配符======  ### -->
				<value>classpath*:com/donglusoft/person/domain/*.hbm.xml</value>
				<value>classpath*:com/donglusoft/rightmanagement/domain/*.hbm.xml</value>
				<!-- 20131029 银保系统添加 -->
				<value>classpath*:com/yinli/item/vo/*.hbm.xml</value>
			</list>
		</property>
	</bean>
	<bean name="hibernateProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<!-- 当你使用mysql的时候，使用的是org.hibernate.dialect.MySQLInnoDBDialect -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
				<!--prop key="hibernate.connection.driver_class">${hibernate.connection.driver_class}</prop-->
				<!--Hibernate的缓存部分，可以不用，直接在DAO层进行配置二级缓存 -->
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.provider_configuration_file_resource_path">${hibernate.cache.provider_configuration_file_resource_path}</prop>
			</props>
		</property>
	</bean>


	<!-- 数据层用的模板工具，不是必须的 -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!-- 事务配置，必须 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager" abstract="false" lazy-init="default" autowire="default" dependency-check="default">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 切面配置  -->
	<aop:config>
		<aop:pointcut id="transactionPointcut1" expression="execution(* com.donglusoft.person.service.*.*(..))" />
		<aop:pointcut id="transactionPointcut2" expression="execution(* com.donglusoft.rightmanagement.service.*.*(..))" />
		<aop:pointcut id="transactionPointcut3" expression="execution(* com.yinli.item.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="transactionPointcut1" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="transactionPointcut2" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="transactionPointcut3" />
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="find*" read-only="true" propagation="NOT_SUPPORTED" />
			<tx:method name="*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="search*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<bean class="plantix.core.spring.suport.factory.BeanFactoryUtils" lazy-init="false" />
</beans>